// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  products     Product[]
  salesTargets SalesTarget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("categories")
}

model Product {
  id               String            @id @default(cuid())
  name             String
  description      String?
  price            Float
  wholesalePrice   Float?
  stock            Int               @default(0)
  image            String?
  barcode          String?           @unique
  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       String
  orderItems       OrderItem[]
  procurementItems ProcurementItem[] // relation to procurement items
  stockOpnameItems StockOpnameItem[] // relation to stock opname items
  isActive         Boolean           @default(true)
  // Dashboard Analytics Relations
  dailyStats       DailyStats[]
  weeklyStats      WeeklyStats[]
  monthlyStats     MonthlyStats[]
  productStats     ProductStats[]
  customerStats    CustomerStats[]
  salesTargets     SalesTarget[]
  inventoryAlerts  InventoryAlert[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("products")
}

model Customer {
  id            String         @id @default(cuid())
  name          String
  email         String?        @unique
  phone         String?
  address       String?
  orders        Order[]
  customerStats CustomerStats?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("customers")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  customer        Customer?     @relation(fields: [customerId], references: [id])
  customerId      String?
  cashier         User          @relation(fields: [cashierId], references: [id])
  cashierId       String
  items           OrderItem[]
  subtotal        Float
  tax             Float
  discount        Float         @default(0)
  total           Float
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  status          OrderStatus   @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float   // Price at time of order
  subtotal  Float

  @@map("order_items")
}

model User {
  id                   String                @id @default(cuid())
  username             String                @unique
  email                String                @unique
  password             String
  firstName            String
  lastName             String
  role                 UserRole              @default(CASHIER)
  isActive             Boolean               @default(true)
  orders               Order[]
  shifts               Shift[]
  cashierPerformance   CashierPerformance[]
  salesTargets         SalesTarget[]
  procurements         Procurement[]         // relation to procurements
  createdStockOpnames  StockOpname[]         // Stock opnames created by this user
  approvedStockOpnames StockOpname[]         @relation("ApprovedStockOpname") // Stock opnames approved by this user
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@map("users")
}

model Shift {
  id              String         @id @default(cuid())
  cashier         User           @relation(fields: [cashierId], references: [id])
  cashierId       String
  startTime       DateTime       @default(now())
  endTime         DateTime?
  startBalance    Float          @default(0)
  finalBalance    Float?
  totalSales      Float          @default(0)
  isActive        Boolean        @default(true)
  notes           String?
  dailyStats      DailyStats[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("shifts")
}

// Dashboard Analytics Models
model DailyStats {
  id                    String   @id @default(cuid())
  date                  DateTime @unique
  shift                 Shift?   @relation(fields: [shiftId], references: [id])
  shiftId               String?
  totalTransactions     Int      @default(0)
  totalSales            Float    @default(0)
  totalProfit           Float    @default(0)
  totalCustomers        Int      @default(0)
  totalItemsSold        Int      @default(0)
  averageOrderValue     Float    @default(0)
  cashSales             Float    @default(0)
  cardSales             Float    @default(0)
  mobilePaymentSales    Float    @default(0)
  topSellingProductId   String?
  topSellingProduct     Product? @relation(fields: [topSellingProductId], references: [id])
  topSellingProductQty  Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("daily_stats")
}

model WeeklyStats {
  id                    String   @id @default(cuid())
  weekStart             DateTime @unique
  weekEnd               DateTime
  totalTransactions     Int      @default(0)
  totalSales            Float    @default(0)
  totalProfit           Float    @default(0)
  totalCustomers        Int      @default(0)
  totalItemsSold        Int      @default(0)
  averageOrderValue     Float    @default(0)
  bestSalesDay          DateTime?
  bestSalesDayAmount    Float    @default(0)
  topSellingProductId   String?
  topSellingProduct     Product? @relation(fields: [topSellingProductId], references: [id])
  topSellingProductQty  Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("weekly_stats")
}

model MonthlyStats {
  id                    String   @id @default(cuid())
  month                 Int      // 1-12
  year                  Int
  totalTransactions     Int      @default(0)
  totalSales            Float    @default(0)
  totalProfit           Float    @default(0)
  totalCustomers        Int      @default(0)
  totalItemsSold        Int      @default(0)
  averageOrderValue     Float    @default(0)
  bestSalesDay          DateTime?
  bestSalesDayAmount    Float    @default(0)
  topSellingProductId   String?
  topSellingProduct     Product? @relation(fields: [topSellingProductId], references: [id])
  topSellingProductQty  Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([month, year])
  @@map("monthly_stats")
}

model ProductStats {
  id              String   @id @default(cuid())
  product         Product  @relation(fields: [productId], references: [id])
  productId       String
  date            DateTime
  quantitySold    Int      @default(0)
  revenue         Float    @default(0)
  profit          Float    @default(0)
  averagePrice    Float    @default(0)
  stockAtStart    Int      @default(0)
  stockAtEnd      Int      @default(0)
  reorderAlert    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([productId, date])
  @@map("product_stats")
}

model CustomerStats {
  id                  String   @id @default(cuid())
  customer            Customer @relation(fields: [customerId], references: [id])
  customerId          String
  totalOrders         Int      @default(0)
  totalSpent          Float    @default(0)
  averageOrderValue   Float    @default(0)
  lastOrderDate       DateTime?
  firstOrderDate      DateTime?
  favoriteProductId   String?
  favoriteProduct     Product? @relation(fields: [favoriteProductId], references: [id])
  loyaltyPoints       Int      @default(0)
  customerType        CustomerType @default(REGULAR)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([customerId])
  @@map("customer_stats")
}

model CashierPerformance {
  id                    String   @id @default(cuid())
  cashier               User     @relation(fields: [cashierId], references: [id])
  cashierId             String
  date                  DateTime
  totalTransactions     Int      @default(0)
  totalSales            Float    @default(0)
  averageTransactionTime Float   @default(0) // in seconds
  customerSatisfaction  Float?   // 1-5 rating
  errorsCount           Int      @default(0)
  hoursWorked           Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([cashierId, date])
  @@map("cashier_performance")
}

model SalesTarget {
  id                String          @id @default(cuid())
  targetType        TargetType
  targetPeriod      TargetPeriod
  targetValue       Float
  currentValue      Float           @default(0)
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean         @default(true)
  description       String?
  cashierId         String?
  cashier           User?           @relation(fields: [cashierId], references: [id])
  productId         String?
  product           Product?        @relation(fields: [productId], references: [id])
  categoryId        String?
  category          Category?       @relation(fields: [categoryId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("sales_targets")
}

model InventoryAlert {
  id              String      @id @default(cuid())
  product         Product     @relation(fields: [productId], references: [id])
  productId       String
  alertType       AlertType
  threshold       Int
  currentStock    Int
  isResolved      Boolean     @default(false)
  resolvedAt      DateTime?
  priority        AlertPriority @default(MEDIUM)
  message         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("inventory_alerts")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_PAYMENT
  CHECK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum CustomerType {
  REGULAR
  VIP
  WHOLESALE
  MEMBER
}

enum TargetType {
  SALES_REVENUE
  TRANSACTION_COUNT
  PRODUCT_QUANTITY
  CUSTOMER_COUNT
  PROFIT_MARGIN
}

model Unit {
  id          String   @id @default(cuid())
  name        String   @unique  // nama unit seperti "Kilogram", "Liter", dll
  symbol      String   @unique  // simbol seperti "kg", "L", "pcs", dll
  description String?  // deskripsi opsional
  isActive    Boolean  @default(true) // status aktif/tidak aktif
  // Relations - untuk nanti ketika produk menggunakan unit
  // products    Product[] @relation("ProductUnit")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("units")
}

model Supplier {
  id         String        @id @default(cuid())
  name       String
  phone      String?
  address    String?
  storeName  String?       // nama toko/agen
  isActive   Boolean       @default(true) // status (aktif/tidak aktif)
  procurements Procurement[] // relation to procurements
  createdAt  DateTime      @default(now()) // tgl ditambahkan
  updatedAt  DateTime      @updatedAt // terakhir diperbarui

  @@map("suppliers")
}

enum ProcurementStatus {
  DRAFT
  ORDERED
  RECEIVED
  CANCELLED
}

model Procurement {
  id                String              @id @default(cuid())
  procurementNumber String              @unique
  supplier          Supplier?           @relation(fields: [supplierId], references: [id])
  supplierId        String?
  items             ProcurementItem[]
  totalItems        Int                 @default(0)
  totalAmount       Float               @default(0)
  status            ProcurementStatus   @default(DRAFT)
  orderDate         DateTime            @default(now())
  receivedDate      DateTime?
  notes             String?
  createdBy         User                @relation(fields: [createdById], references: [id])
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("procurements")
}

model ProcurementItem {
  id            String      @id @default(cuid())
  procurement   Procurement @relation(fields: [procurementId], references: [id], onDelete: Cascade)
  procurementId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("procurement_items")
}

enum TargetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  OVERSTOCK
  EXPIRED
  NEAR_EXPIRY
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model StockOpname {
  id              String              @id @default(cuid())
  opnameNumber    String              @unique
  title           String
  description     String?
  status          StockOpnameStatus   @default(DRAFT)
  items           StockOpnameItem[]
  totalItems      Int                 @default(0)
  checkedItems    Int                 @default(0)
  totalDifference Float               @default(0)
  createdBy       User                @relation(fields: [createdById], references: [id])
  createdById     String
  approvedBy      User?               @relation("ApprovedStockOpname", fields: [approvedById], references: [id])
  approvedById    String?
  approvedAt      DateTime?
  scheduledDate   DateTime?
  completedAt     DateTime?
  completedDate   DateTime?
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("stock_opnames")
}

model StockOpnameItem {
  id              String        @id @default(cuid())
  stockOpname     StockOpname   @relation(fields: [stockOpnameId], references: [id], onDelete: Cascade)
  stockOpnameId   String
  product         Product       @relation(fields: [productId], references: [id])
  productId       String
  systemStock     Int           // Stock according to system
  physicalStock   Int?          // Actual physical count (nullable until checked)
  difference      Int           @default(0) // Difference (physical - system)
  notes           String?
  checkedAt       DateTime?     // When this item was physically checked
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([stockOpnameId, productId])
  @@map("stock_opname_items")
}

enum StockOpnameStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CANCELLED
  APPROVED
}
